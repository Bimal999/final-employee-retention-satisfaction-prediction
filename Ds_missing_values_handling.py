# -*- coding: utf-8 -*-
"""Copy of Missing values handling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BiZjjEmMTQ3QPKU4-kt_ec0jpASjBz2T
"""

!gdown 1g1nwk4k-h9FceEHKZc8ocfu_xp3xnZ8R

import pandas as pd

df=pd.read_csv('hr.csv')

df.head(5)

df.describe()

df.info()

df.shape

df.isnull().sum()

"""# Fill missing values in 'age' column with the mean"""

mean_age = df['age'].mean()
df['age'].fillna(mean_age, inplace=True)

df.head()

"""# Fill missing values in 'Department' column with the mode"""

mode_department = df['Department'].mode()[0]  # mode() returns a series, so we take the first value
df['Department'].fillna(mode_department, inplace=True)

"""# Fill missing values in 'salary' column with the mode"""

mode_salary = df['salary'].mode()[0]
df['salary'].fillna(mode_salary, inplace=True)

df.head()

"""#Data visualization


"""

import numpy as np

df.columns.tolist()

import matplotlib.pyplot as plt
import seaborn as sns


# List of numerical features
numerical_features = ['satisfaction_level', 'last_evaluation', 'number_project', 'average_montly_hours', 'time_spend_company', 'age']

# Plot histograms
df[numerical_features].hist(bins=15, figsize=(15, 10), layout=(4,4 ))
plt.show()

# Plot box plots
plt.figure(figsize=(10, 5))
for i, feature in enumerate(numerical_features):
    plt.subplot(2, 3, i+1)
    sns.boxplot(x=df[feature])
    plt.title(feature)
plt.tight_layout()
plt.show()

# Plot count plots for categorical features
plt.figure(figsize=(10, 5))

# Department
plt.subplot(1, 2, 1)
sns.countplot(x='Department', data=df)
plt.title('Department Distribution')
plt.xticks(rotation=45)

# Salary
plt.subplot(1, 2, 2)
sns.countplot(x='salary', data=df)
plt.title('Salary Distribution')

plt.tight_layout()
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

# Prepare the data
X = df.drop('left', axis=1)
y = df['left']

#Convert categorical variables to dummy/indicator variables
X = pd.get_dummies(X, drop_first=True)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

df.head()

X_train.head()

X_test.head()

# Train the model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

"""This is the machine learning model for predicting employee-retention-satisfaction-prediction"""

